{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchItems, addItems, updateItems, deleteItems } from './cartAPI';\nconst initialState = {\n  items: [],\n  status: 'idle'\n};\nexport const fetchItemsAsync = createAsyncThunk('carts/fetchItems', async () => {\n  const response = await fetchItems();\n  return response.data;\n});\nexport const addItemAsync = createAsyncThunk('cart/addItems', async item => {\n  const {\n    id,\n    title,\n    brand,\n    price,\n    thumbnail\n  } = item;\n  const response = await addItems({\n    id,\n    title,\n    brand,\n    price,\n    thumbnail,\n    quantity: 1\n  });\n  return response.data;\n});\nexport const deleteItemAsync = createAsyncThunk('cart/deleteItem', async id => {\n  const response = await deleteItems(id);\n  return response.data.id;\n});\nexport const updateItemsAsync = createAsyncThunk('cart/updateItem', async (id, updateItem) => {\n  await update;\n});\nexport const cartSlice = createSlice({\n  name: 'carts',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchItemsAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchItemsAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.items = action.payload;\n    }).addCase(addItemAsync.fulfilled, (state, action) => {\n      state.items.push(action.payload);\n      state.status = 'idle';\n    }).addCase(deleteItemAsync.fulfilled, (state, action) => {\n      const index = state.items.findIndex(item => item.id === action.payload);\n      state.items.splice(index, 1);\n    });\n  }\n});\nexport const selectcarts = state => state.carts.items;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchItems","addItems","updateItems","deleteItems","initialState","items","status","fetchItemsAsync","response","data","addItemAsync","item","id","title","brand","price","thumbnail","quantity","deleteItemAsync","updateItemsAsync","updateItem","update","cartSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","push","index","findIndex","splice","selectcarts","carts","reducer"],"sources":["/home/mrinal/MERN/Redux/Redux-Project/redux-api-example/src/features/cart/cartSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchItems,addItems,updateItems,deleteItems } from './cartAPI';\n\nconst initialState = {\n  items : [],\n  status: 'idle',\n};\n\nexport const fetchItemsAsync = createAsyncThunk(\n  'carts/fetchItems',\n  async () => {\n    const response = await fetchItems();\n    return response.data;\n  }\n);\n\nexport const addItemAsync = createAsyncThunk(\n  'cart/addItems',\n  async (item)=>{\n    const {id,title,brand,price,thumbnail} = item;\n    const response = await addItems({id,title,brand,price,thumbnail,quantity:1});\n    return response.data;\n  }\n)\n\nexport const deleteItemAsync = createAsyncThunk(\n  'cart/deleteItem',\n  async (id)=>{\n    const response = await deleteItems(id);\n    return response.data.id;\n  }\n)\n\nexport const updateItemsAsync = createAsyncThunk(\n  'cart/updateItem',\n  async (id,updateItem)=>{\n    await update\n  }\n)\n\nexport const cartSlice = createSlice({\n  name: 'carts',\n  initialState,\n  reducers: {\n    \n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchItemsAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchItemsAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.items = action.payload;\n      })\n      .addCase(addItemAsync.fulfilled,(state,action)=>{\n        state.items.push(action.payload);\n        state.status = 'idle';\n      })\n      .addCase(deleteItemAsync.fulfilled,(state,action)=>{\n        const index = state.items.findIndex(item=>item.id===action.payload);\n        state.items.splice(index,1);\n      });\n  },\n});\n\nexport const selectcarts = (state) => state.carts.items;\nexport default cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,UAAU,EAACC,QAAQ,EAACC,WAAW,EAACC,WAAW,QAAQ,WAAW;AAEvE,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAG,EAAE;EACVC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGT,gBAAgB,CAC7C,kBAAkB,EAClB,YAAY;EACV,MAAMU,QAAQ,GAAG,MAAMR,UAAU,CAAC,CAAC;EACnC,OAAOQ,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGZ,gBAAgB,CAC1C,eAAe,EACf,MAAOa,IAAI,IAAG;EACZ,MAAM;IAACC,EAAE;IAACC,KAAK;IAACC,KAAK;IAACC,KAAK;IAACC;EAAS,CAAC,GAAGL,IAAI;EAC7C,MAAMH,QAAQ,GAAG,MAAMP,QAAQ,CAAC;IAACW,EAAE;IAACC,KAAK;IAACC,KAAK;IAACC,KAAK;IAACC,SAAS;IAACC,QAAQ,EAAC;EAAC,CAAC,CAAC;EAC5E,OAAOT,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMS,eAAe,GAAGpB,gBAAgB,CAC7C,iBAAiB,EACjB,MAAOc,EAAE,IAAG;EACV,MAAMJ,QAAQ,GAAG,MAAML,WAAW,CAACS,EAAE,CAAC;EACtC,OAAOJ,QAAQ,CAACC,IAAI,CAACG,EAAE;AACzB,CACF,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAGrB,gBAAgB,CAC9C,iBAAiB,EACjB,OAAOc,EAAE,EAACQ,UAAU,KAAG;EACrB,MAAMC,MAAM;AACd,CACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGvB,WAAW,CAAC;EACnCwB,IAAI,EAAE,OAAO;EACbnB,YAAY;EACZoB,QAAQ,EAAE,CAEV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACpB,eAAe,CAACqB,OAAO,EAAGC,KAAK,IAAK;MAC3CA,KAAK,CAACvB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDqB,OAAO,CAACpB,eAAe,CAACuB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACrDF,KAAK,CAACvB,MAAM,GAAG,MAAM;MACrBuB,KAAK,CAACxB,KAAK,GAAG0B,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACjB,YAAY,CAACoB,SAAS,EAAC,CAACD,KAAK,EAACE,MAAM,KAAG;MAC9CF,KAAK,CAACxB,KAAK,CAAC4B,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC;MAChCH,KAAK,CAACvB,MAAM,GAAG,MAAM;IACvB,CAAC,CAAC,CACDqB,OAAO,CAACT,eAAe,CAACY,SAAS,EAAC,CAACD,KAAK,EAACE,MAAM,KAAG;MACjD,MAAMG,KAAK,GAAGL,KAAK,CAACxB,KAAK,CAAC8B,SAAS,CAACxB,IAAI,IAAEA,IAAI,CAACC,EAAE,KAAGmB,MAAM,CAACC,OAAO,CAAC;MACnEH,KAAK,CAACxB,KAAK,CAAC+B,MAAM,CAACF,KAAK,EAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,WAAW,GAAIR,KAAK,IAAKA,KAAK,CAACS,KAAK,CAACjC,KAAK;AACvD,eAAeiB,SAAS,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}